/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as EvaluateSurveyRouteImport } from './routes/evaluate/survey'
import { Route as EvaluateConsentRouteImport } from './routes/evaluate/consent'
import { Route as EvaluateCalibrationRouteImport } from './routes/evaluate/calibration'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluateSurveyRoute = EvaluateSurveyRouteImport.update({
  id: '/evaluate/survey',
  path: '/evaluate/survey',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluateConsentRoute = EvaluateConsentRouteImport.update({
  id: '/evaluate/consent',
  path: '/evaluate/consent',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluateCalibrationRoute = EvaluateCalibrationRouteImport.update({
  id: '/evaluate/calibration',
  path: '/evaluate/calibration',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/evaluate/calibration': typeof EvaluateCalibrationRoute
  '/evaluate/consent': typeof EvaluateConsentRoute
  '/evaluate/survey': typeof EvaluateSurveyRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/evaluate/calibration': typeof EvaluateCalibrationRoute
  '/evaluate/consent': typeof EvaluateConsentRoute
  '/evaluate/survey': typeof EvaluateSurveyRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/evaluate/calibration': typeof EvaluateCalibrationRoute
  '/evaluate/consent': typeof EvaluateConsentRoute
  '/evaluate/survey': typeof EvaluateSurveyRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/evaluate/calibration'
    | '/evaluate/consent'
    | '/evaluate/survey'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/evaluate/calibration'
    | '/evaluate/consent'
    | '/evaluate/survey'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/evaluate/calibration'
    | '/evaluate/consent'
    | '/evaluate/survey'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EvaluateCalibrationRoute: typeof EvaluateCalibrationRoute
  EvaluateConsentRoute: typeof EvaluateConsentRoute
  EvaluateSurveyRoute: typeof EvaluateSurveyRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluate/survey': {
      id: '/evaluate/survey'
      path: '/evaluate/survey'
      fullPath: '/evaluate/survey'
      preLoaderRoute: typeof EvaluateSurveyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluate/consent': {
      id: '/evaluate/consent'
      path: '/evaluate/consent'
      fullPath: '/evaluate/consent'
      preLoaderRoute: typeof EvaluateConsentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluate/calibration': {
      id: '/evaluate/calibration'
      path: '/evaluate/calibration'
      fullPath: '/evaluate/calibration'
      preLoaderRoute: typeof EvaluateCalibrationRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EvaluateCalibrationRoute: EvaluateCalibrationRoute,
  EvaluateConsentRoute: EvaluateConsentRoute,
  EvaluateSurveyRoute: EvaluateSurveyRoute,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
